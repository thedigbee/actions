name: trigger-image-deploy

description: |
  Pulls the latest image pertaining to a Docker service and restarts it.

inputs:
  ssh-server:
    description: SSH server IP where docker-compose is running
    required: true

  ssh-user:
    description: SSH username
    required: true

  ssh-key:
    description: SSH private key
    required: true

  ssh-command-timeout:
    description: Timeout for SSH command (see https://github.com/appleboy/ssh-action)
    default: 10m

  docker-service-name:
    description: |
      Name of the Docker service to be restarted so that it takes into account the new image.
      Use '%s' as a placeholder for the name of the repository
    required: true
    default: digbee-%s

  docker-compose-path:
    description: |
      Path to the docker-compose.yml file. Support multiple paths via comma-separation.
      DO NOT use the "~" shortcut.
    required: true
    default: docker-compose.yml

  docker-image-tag:
    description: |
      Docker image tag. Leave empty to pull latest image as specified in docker-compose
      files (see docker-compose-path).
      Accepted values:
        - <empty>
        - any valid Docker image tag (develop, master, sha:xxxxxx)

  docker-compose-override-file-name:
    description: |
      Name of the file to be used as override for docker-compose for specifying image tags
    default: docker-compose.local.yml
    required: true

runs:
  using: composite
  steps:
    - name: Execute commands on SSH host
      uses: appleboy/ssh-action@master
      with:
        HOST: ${{ inputs.ssh-server }}
        USERNAME: ${{ inputs.ssh-user }}
        KEY: ${{ inputs.ssh-key }}
        command_timeout: ${{ inputs.ssh-command-timeout }}
        script: |
          REPOSITORY_NAME="${{ github.repository }}"
          REPOSITORY_NAME=$(echo "$REPOSITORY_NAME" | awk -F / '{print $2}')

          # Determine Docker service name by resolving the placeholder
          PLACEHOLDER="%s"
          SERVICE_NAME=$(echo "${{ inputs.docker-service-name }}" | sed "s/$PLACEHOLDER/$REPOSITORY_NAME/g")

          # Split docker-compose file paths by comma
          # https://stackoverflow.com/questions/10586153/how-to-split-a-string-into-an-array-in-bash
          IFS=',' read -r -a FILE_PATHS <<< "${{ inputs.docker-compose-path }}"

          # Concat all file paths as a single argument to docker-compose
          FILE_ARGS=()
          for element in ${FILE_PATHS[@]}
          do
            TRIMMED_PATH=$(echo $element | xargs)
            FILE_ARGS+=(-f $TRIMMED_PATH)
          done

          OVERRIDE_FILE="${{ inputs.docker-compose-override-file-name }}"
          touch $OVERRIDE_FILE
          DOCKER_IMAGE_TAG="${{ inputs.docker-image-tag }}"
          truncate -s 0 $OVERRIDE_FILE
          if [[ $DOCKER_IMAGE_TAG != "" ]]; then
            echo "services:" >> $OVERRIDE_FILE
            echo -e "\t$SERVICE_NAME:" >> $OVERRIDE_FILE
            echo -e "\t\timage: ghcr.io/$REPOSITORY_NAME:$DOCKER_IMAGE_TAG" >> $OVERRIDE_FILE
          fi;
          FILE_ARGS+=(-f $OVERRIDE_FILE)

          #XXXXXXXXXXXXXXXXXXXXXXX
          #XXXXXXXXXXXXXXXXXXXXXXX
          #XXXXXXXXXXXXXXXXXXXXXXX
          #XXXXXXXXXXXXXXXXXXXXXXX
          cat $OVERRIDE_FILE
          #XXXXXXXXXXXXXXXXXXXXXXX
          #XXXXXXXXXXXXXXXXXXXXXXX
          #XXXXXXXXXXXXXXXXXXXXXXX
          #XXXXXXXXXXXXXXXXXXXXXXX

          # Pull latest image
          sudo docker-compose ${FILE_ARGS[@]} pull $SERVICE_NAME

          # Recreate service container
          COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 \
              sudo docker-compose ${FILE_ARGS[@]} up --build --force-recreate -d --remove-orphans $SERVICE_NAME

          # Log image & container state
          sudo docker container ls
          sudo docker image ls
