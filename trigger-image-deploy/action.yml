name: trigger-image-deploy

description: |
  Pulls the latest image pertaining to a Docker service and restarts it.

inputs:
  ssh-server:
    description: SSH server IP where docker-compose is running
    required: true

  ssh-user:
    description: SSH username
    required: true

  ssh-key:
    description: SSH private key
    required: true

  ssh-command-timeout:
    description: Timeout for SSH command (see https://github.com/appleboy/ssh-action)
    default: 10m

  docker-service-name:
    description: |
      Name of the Docker service to be restarted so that it takes into account the new image.
      Use '%s' as a placeholder for the name of the repository
    required: true
    default: digbee-%s

  docker-compose-path:
    description: |
      Path to the docker-compose.yml file. Support multiple paths via comma-separation.
      DO NOT use the "~" shortcut.
    required: true
    default: docker-compose.yml

  docker-compose-path-override:
    description: |
      Path to the file to be used to specify Docker image tags
    default: docker-compose.remote.yml
    required: true

  docker-image-tag:
    description: |
      Docker image tag. Leave empty to pull latest image as specified in docker-compose
      files (see docker-compose-path).
      Accepted values:
        - <empty>
        - any valid Docker image tag (develop, master, sha:xxxxxx)

runs:
  using: composite
  steps:
    - name: Execute commands on SSH host
      uses: appleboy/ssh-action@master
      with:
        HOST: ${{ inputs.ssh-server }}
        USERNAME: ${{ inputs.ssh-user }}
        KEY: ${{ inputs.ssh-key }}
        command_timeout: ${{ inputs.ssh-command-timeout }}
        script: |
          ##### Action inputs are variables for more clarity and cleanliness
          REPO_NAME="${{ github.repository }}"
          OVERRIDE_FILE="${{ inputs.docker-compose-path-override }}"
          RAW_DOCKER_SERVICE_NAME="${{ inputs.docker-service-name }}"
          DOCKER_COMPOSE_PATH="${{ inputs.docker-compose-path }}"

          ##### Abort script with error code if any of the commands in the script fail
          # https://stackoverflow.com/a/1379904
          set -e

          ##### Input validation: OVERRIDE_FILE
          if [ ! -f "$OVERRIDE_FILE" ]; then
            echo "'$OVERRIDE_FILE' doesn't exist or is not a file";
            exit 1;
          fi

          ##### Input validation: DOCKER_COMPOSE_PATH
          # Split docker-compose file paths by comma
          # https://stackoverflow.com/questions/10586153/how-to-split-a-string-into-an-array-in-bash
          IFS=',' read -r -a FILE_PATHS <<< $DOCKER_COMPOSE_PATH
          for element in ${FILE_PATHS[@]}
          do
            # Validate each file path is indeed a file
            if [ ! -f "$element" ]; then
              echo "'$element' doesn't exist or is not a file";
              exit 1;
            fi
          done

          ##### Determine Docker service name by resolving the placeholder
          REPO_NAME_WITHOUT_ORGANIZATION=$(echo "$REPO_NAME" | awk -F / '{print $2}')
          PLACEHOLDER="%s"
          DOCKER_SERVICE=$(echo $RAW_DOCKER_SERVICE_NAME | sed "s/$PLACEHOLDER/$REPO_NAME_WITHOUT_ORGANIZATION/g")

          ##### Concat all file paths as a single argument to docker-compose
          FILE_ARGS=()
          for element in ${FILE_PATHS[@]}
          do
            TRIMMED_PATH=$(echo $element | xargs)
            FILE_ARGS+=(-f $TRIMMED_PATH)
          done

          ##### Make sure "yq" package is installed first.
          YQ_PACKAGE=yq
          which $YQ_PACKAGE &> /dev/null
          if [ ! $? -eq 0 ]; then
            echo "Installing '$YQ_PACKAGE' (apt-get)..."
            sudo apt-get install $YQ_PACKAGE &> /dev/null
            if [ $? -eq 0 ]; then
              echo "Successfully installed '$YQ_PACKAGE' (apt-get)."
            else
              echo "Package '$YQ_PACKAGE' not found (apt-get). Installing '$YQ_PACKAGE' (snap)..."
              sudo snap install $YQ_PACKAGE &> /dev/null || exit 0
              echo "Successfully installed '$YQ_PACKAGE' (snap)."
            fi
          fi

          ##### Specify image tag in override file
          yq e -i ".services.$DOCKER_SERVICE.image = \"$DOCKER_IMAGE_TAG\"" $OVERRIDE_FILE

          ##### Append override file to docker-compose file args
          FILE_ARGS+=(-f $OVERRIDE_FILE)

          ##### Pull latest image
          sudo docker-compose ${FILE_ARGS[@]} pull $DOCKER_SERVICE

          ##### Recreate service container
          COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 \
              sudo docker-compose ${FILE_ARGS[@]} up --build --force-recreate -d --remove-orphans $DOCKER_SERVICE

          ##### Log image & container state
          sudo docker container ls
          sudo docker image ls
